name: App Blog prod

on:
  push:
    branches:
      - main
    paths:
      - "apps/blog/**"
      - "packages/**"
      - ".github/workflows/app-blog-prod.yml"

jobs:
  linting:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: ./.github/actions/setup-pnpm

      - name: Setup Biome
        uses: biomejs/setup-biome@v2
        with:
          version: latest

      - name: Run linting
        run: turbo lint:ci --filter=blog

  unit-testing:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: ./.github/actions/setup-pnpm

      - name: Run unit tests
        run: turbo test --filter=blog

  docker-ecs-build:
    needs: [linting, unit-testing]
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      AWS_REGION: ap-northeast-2
      ECR_REPOSITORY: onlyon/blog-prod
      ECS_SERVICE: onlyon-blog-prod
      ECS_CLUSTER: onlyon-blog-prod
      ECS_TASK_DEFINITION: .aws/task-definition-blog-prod.json
      CONTAINER_NAME: onlyon-blog-prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build_image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg WORKSPACE=blog \
            --build-arg NEXT_PUBLIC_GOOGLE_GEMINI_API_KEY=${{ secrets.GOOGLE_GEMINI_API_KEY }} \
            --build-arg NEXT_PUBLIC_PORTFOLIO_URL=https://portfolio.sionly.one \
            --build-arg NEXT_PUBLIC_BLOG_URL=https://blog.sionly.one \
            --build-arg NEXT_PUBLIC_API_URL=https://blog.sionly.one \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build_image.outputs.image }}
          environment-variables: |
            NEXT_PUBLIC_GOOGLE_GEMINI_API_KEY=${{ secrets.GOOGLE_GEMINI_API_KEY }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
